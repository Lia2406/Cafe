#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <time.h>

#define MAX_MENU 100 
#define MAX_BUFFER_SIZE 256 
#define MAX_MEJA 10 // Jumlah maksimum meja
#define FILE_NAME "data_meja.txt"

typedef struct {
	
    int NoItem; 
    char Nama[100];
    float Harga;
	    
} MenuItem; // untuk menyimpan detail menu

typedef struct {
	
    int NoItem;
    char Nama[100];
    char Customer [100];
    int JumlahItem;
    float TotalHarga;
    float Harga;
    char Status[20];  // "diproses", "selesai", dll.
    char WaktuPesanan[20];
    int Hari; // Menyimpan hari dalam sebulan pesanan dibuat
    int Bulan; // Menyimpan bulan keberapa pesanan dibuat 
	int Tahun; // Menyimpan tahun pesanan dibuat 
	
    
} Order; // untuk menyimpan detail pesanan bagi seluruh pelanggan yang bersifat "sementara"

typedef struct {
    int nomor;
    int jumlah_kursi;
    char status[10]; // "Kosong" atau "Terisi"
} Meja; //untuk menyimpan data meja 




//modul untuk menampilkan tampilan awal pada saat membuka aplikasi//
void WelcomingSection () {
	
   
    printf("**************************************************\n");
    printf("*                                                *\n");
    printf("*      		 WELCOME TO OUR CAFE             *\n");
    printf("*  	We Are Ready To Serve You with a Smile!  *\n");
    printf("*                                                *\n");
    printf("**************************************************\n");
    
}

void OpsiMasuk() {
	
    while (1) {
        int opt;
        printf("Pilih Opsi Masuk\n 1. Masuk Sebagai Pelanggan\n2. Masuk Sebagai Staff\n\n");
        printf("Masukkan Pilihan Anda : ");
        scanf("%d", &opt);
        clear_screen();

        if (opt == 1) {
            Pelanggan();
        } else if (opt == 2) {
            Staff();
        } else if (opt == 3) { 
            break;
        } else {
            printf("Mohon Maaf, Perintah Tidak dapat dikenali. Silakan Masukkan Ulang Opsi.\n");
        }
    }
}

void ModulPelanggan (Meja meja[], MenuItem Menu[], Order Pesanan[],  int *totalMeja, const char *lokasi_file, int *jumlahMenuItem, int *JumlahItem, float TotalHarga, float NominalPembayaran, int hargaTotalItem) {
	
	tampilkanMeja(meja, totalMeja); 
	pickTable(meja, totalMeja);
	loadMeja(meja, &totalMeja);
	saveMeja(meja, totalMeja);
	hitung_baris_dalam_file("Menu.txt");
	muat_data_Menu("Menu.txt", &jumlahMenuItem);
	MasukanPesanan(Menu, Pesanan, &jumlahMenuItem, &JumlahItem);
	KonfirmasiPesanan(Menu, Pesanan, &jumlahMenuItem, &JumlahItem);
	PilihPembayaran (Menu, Pesanan, jumlahMenuItem, TotalHarga, NominalPembayaran, hargaTotalItem);
	cetakStruk(Menu, Pesanan, JumlahItem, TotalHarga, "Menu.txt", "meja.txt"); 
	  
}

void tampilkanMeja(Meja meja[], int totalMeja) {
	
	int i; 
	
    system("cls");
    printf("\nDaftar Meja:\n");
    printf("No. Meja\tJumlah Kursi\tStatus\n");
    for (i = 0; i < totalMeja; i++) {
        printf("%d\t\t%d\t\t%s\n", meja[i].nomor, meja[i].jumlah_kursi, meja[i].status);
    }
}

void pickTable(Meja meja[], int totalMeja) {
    int nomor;
    printf("Masukkan Nomor Meja Yang Ingin Dipesan: ");
    scanf("%d", &nomor);

    // Cek apakah nomor meja valid dan kosong
    if (nomor < 1 || nomor > totalMeja) {
        printf("Nomor meja tidak valid! Pilih nomor meja antara 1 dan %d.\n", totalMeja);
    } else if (strcmp(meja[nomor - 1].status, "Terisi") == 0) {
        printf("Meja %d sudah terisi. Pilih meja yang lain.\n", nomor);
    } else {
        strcpy(meja[nomor - 1].status, "Terisi");  // Tandai meja sebagai terisi
        printf("Meja %d telah dipesan!\n", nomor);
    }
}

void loadMeja(Meja meja[], int *totalMeja) {
    FILE *file = fopen("meja.txt", "r");
    if (file == NULL) {
        printf("Gagal membuka file!\n");
        exit(1);
    }

    int i = 0;
    while (fscanf(file, "%d %d %s", &meja[i].nomor, &meja[i].jumlah_kursi, meja[i].status) != EOF && i < MAX_MEJA) {
        i++;
    }
    *totalMeja = i;

    fclose(file);
}

void saveMeja(Meja meja[], int totalMeja) {
    FILE *file = fopen("meja.txt", "w");
    if (file == NULL) {
        printf("Gagal membuka file!\n");
        exit(1);
    }
	int i;
    for (i = 0; i < totalMeja; i++) {
        fprintf(file, "%d %d %s\n", meja[i].nomor, meja[i].jumlah_kursi, meja[i].status);
    }

    fclose(file);
}


// Fungsi untuk menghitung jumlah baris dalam file
int hitung_baris_dalam_file(const char *lokasi_file) {
    FILE *f = fopen(lokasi_file, "r");
    if (f == NULL) {
        printf("Kesalahan: Tidak dapat membuka file untuk membaca.\n");
        return -1;
    }

    int baris = 0;
    char buffer [MAX_BUFFER_SIZE];

    while (fgets(buffer, sizeof(buffer), f)) {
        baris++;
    }

    fclose(f);
    return baris;
}

// Fungsi untuk memuat data dari file ke dalam array yang dialokasikan secara dinamis
MenuItem *muat_data_Menu(const char *lokasi_file, int *JumlahMenuItem) {
    *JumlahMenuItem = hitung_baris_dalam_file(lokasi_file);
    if (*JumlahMenuItem <= 0) {
        return NULL;
    }

    // Alokasikan memori untuk array Menu
    MenuItem *Menu = (MenuItem *)malloc((*JumlahMenuItem) * sizeof(Menu));
    if (Menu == NULL) {
        printf("Kesalahan: Alokasi memori gagal.\n");
        return NULL;
    }

    FILE *f = fopen(lokasi_file, "r");
    if (f == NULL) {
        printf("Kesalahan: Tidak dapat membuka file untuk membaca.\n");
        free(Menu);
        return NULL;
    }

    // Baca dan masukkan data ke array Menu
    char buffer[MAX_BUFFER_SIZE];
    int i = 0;
    while (fgets(buffer, sizeof(buffer), f) && i < *JumlahMenuItem) {
    	if (sscanf(buffer, "%d|%99[^|]|%f|", &Menu[i].NoItem, Menu[i].Nama, &Menu[i].Harga)) {
       		i++;
        } else {
       		printf("Kesalahan format di baris %d: %s\n", i + 1, buffer);
		}
   	} 
	
    printf("%-30s Rp.%s\n", Menu[i].Nama, &Menu[i].Harga);

    fclose(f);
    return Menu;
}

// Fungsi untuk menampilkan menu kepada pelanggan
void tampilkanMenu(MenuItem Menu[], int jumlahMenuItem) {
	int i;
    printf("****************************************************************************************************\n");
    printf("     	 				 MENU	  	        	   \n");
    printf("****************************************************************************************************\n");
    printf("%-30s %-60s %-10s\n", "No Item", "Nama Item", "Harga");
    printf("----------------------------------------------------------------------------------------------------\n");
    
    for (i = 0; i < jumlahMenuItem; i++) {
        printf("%-30d %-60s Rp.%.2f\n", Menu[i].NoItem, Menu[i].Nama, Menu[i].Harga);
    }
}



int cariItem(MenuItem Menu[], int jumlahMenuItem, int NoItem) {	
	int i; 
	
    for (i = 0; i < jumlahMenuItem; i++) {
        if (Menu[i].NoItem == NoItem) {
            return i; // Mengembalikan indeks item yang ditemukan
        }
    }
    return -1; // Mengembalikan -1 jika item tidak ditemukan
}

void MasukanPesanan(MenuItem Menu[], Order Pesanan[], int jumlahMenuItem, int* JumlahItem) {
    int NoItem;
    int Jumlah;
    char Customer[100];
    int i = 0;

    printf("Pesanan atas nama: ");
    scanf("%s", Customer);

    while (1) {
        printf("\nMasukkan No Item (masukan 0 untuk berhenti memesan): ");
        scanf("%d", &NoItem);
        if (NoItem == 0) break;

        int indeks = cariItem(Menu, jumlahMenuItem, NoItem);
        if (indeks == -1) {
            printf("Item tidak ditemukan dalam menu.\n");
            continue;
        }

        printf("Masukkan Jumlah Item: ");
        scanf("%d", &Jumlah);

        Pesanan[i].NoItem = NoItem;
        Pesanan[i].JumlahItem = Jumlah;

        // Menyimpan waktu pesanan
        time_t now = time(NULL);
        strftime(Pesanan[i].WaktuPesanan, sizeof(Pesanan[i].WaktuPesanan), "%Y-%m-%d %H:%M:%S", localtime(&now));

        Pesanan[i].TotalHarga = Menu[indeks].Harga * Jumlah;

        strcpy(Pesanan[i].Customer, Customer);

        i++;
    }

    *JumlahItem = i;
}


//modul untuk menentukan jumlah harga dari pesanan pelanggan    
int JumlahHargaItem(MenuItem Menu[], Order Pesanan[], int jumlahItem, int NoItem, int JumlahMenuItem) { 
	int i; 
	int TotalHarga = 0; 
	
	for (i = 0; i < jumlahItem; i++) { 
		int indeks = cariItem(Menu, JumlahMenuItem, Pesanan[i].NoItem); 
			if (indeks != -1) { 
				TotalHarga += Menu[i].Harga * Pesanan[i].JumlahItem;
				return TotalHarga; 
			} 	
	} 
		return 0;  //jika harga tidak ditemukan
}
	


void KonfirmasiPesanan(MenuItem Menu[], Order Pesanan[], int jumlahMenuItem, int jumlahItem) {
	
    int TotalHarga = 0;
    int i;
    int Input; 
    
	printf ("Pesanan Atas Nama : ");
	scanf("\n %c", Menu[i].Nama); 
    for (i = 0; i < jumlahItem; i++) {
        int indeks = cariItem(Menu, jumlahMenuItem, Pesanan[i].NoItem);
        if (indeks != -1) {
            int hargaTotalItem = Menu[indeks].Harga * Pesanan[i].JumlahItem;
            printf("%s x%d - Rp.%f\n", Menu[indeks].Nama, Pesanan[i].JumlahItem, hargaTotalItem);
            TotalHarga += hargaTotalItem;
        }
    }
    printf("Total harga pesanan: Rp.%d\n", TotalHarga);
    printf("\nApakah Pesanan Anda sudah sesuai?\nSilahkan Pilih Opsi di Bawah Ini Untuk Melakukan Konfirmasi");
    
     while (1) {
        printf("\n1. Lanjut Ke Pembayaran\n2. Edit Pesanan\nPilih Opsi: ");
        scanf("%d", &Input);
        if (Input == 1) {
            printf("Silahkan Lakukan Proses Pembayaran\n");
            PilihPembayaran (Input); 
        } else if (Input == 2) {
        
		}
        	
	}
}

void PilihPembayaran (MenuItem Menu[], Order Pesanan[], int jumlahMenuItem, float TotalHarga, float NominalPembayaran, int hargaTotalItem) {
	
	int Input; 
	
	while (1) {
	 	printf("Pilih Metode Pembayaran");
        printf("\n1. Pembayaran Via Tunai\n2. Pembayaran Via Non Tunai \nPilih Opsi: ");
        scanf("%d", &Input);
        if (Input == 1) {
            printf("\n === Proses Pembayaran Via Tunai === \n");
            PembayaranTunai (Menu, Pesanan, jumlahMenuItem, TotalHarga);
            break;
        } else if (Input == 2) {
        	printf("\n === Proses Pembayaran Via Non Tunai === \n");
        	PembayaranNonTunai(Menu, Pesanan, hargaTotalItem, NominalPembayaran, TotalHarga);
        	break;
		} else { 
			printf ("Mohon Maaf, Perintah Tidak dapat dikenali. Silakan Masukkan Ulang Opsi"); 
		} 	
	}
}


void PembayaranTunai (MenuItem Menu[], Order Pesanan[], int jumlahMenuItem, int JumlahItem, float hargaTotalItem) {
	
	int Input;
	
	printf ("Silahkan Lakukan Pembayaran di Kasir dengan Total Harga di Bawah Ini :\n");
	KonfirmasiPesanan(Menu, Pesanan, JumlahItem, hargaTotalItem);
	printf ("\n Segera Lakukan Pembayaran Agar Pesanan Anda Segera diproses ! "); 
	
	printf ("Melakukan Pembayaran (Ketik 1 jika sudah) : ");
	scanf("%d", &Input); 
	while (1) {
		if (Input == 1) {
			printf ("Pembayaran Telah Berhasil diproses");
			//printstruct
		} else {
			printf ("Segera Lakukan Pembayaran Agar Pesanan Anda Segera diproses !");
		}
	}
	
}

void PembayaranNonTunai(MenuItem Menu[], Order Pesanan[], int hargaTotalItem, float NominalPembayaran, int JumlahItem, float TotalHarga) {

	int Input; 
	
	printf ("Silahkan Lakukan Pembayaran dengan Total Harga di Bawah ini : \n"); 
	KonfirmasiPesanan(Menu, Pesanan, JumlahItem, hargaTotalItem); 
	
	while (1) {

	printf("Silahkan Transfer Pada No Rekening dibawaH Ini :\n");
	printf ("001234567890 (BRI)\n");
	printf ("9876543210 (BCA)\n");
	printf ("Masukan Nominal Pembayaran : ");
	scanf ("%f", NominalPembayaran); 
	if (NominalPembayaran == TotalHarga) {
		printf ("Pembayaran Anda Telah Berhasil, Terimakasih! ");
		break;
	} else if (NominalPembayaran <= TotalHarga) {
		printf("Maaf Uang yang Anda Masukan Kurang, Silah Masukan Nominal ");
		break; 
	} else if (NominalPembayaran >= TotalHarga) {
		printf("Pembayaran Anda telah Berhasil\nTerimakasih Atas Uang Tip yang telah Anda Berikan!");
		break;
	}
	} 
	}
	
void cetakStruk(MenuItem Menu[], Order Pesanan[], int jumlahItem, float TotalHarga, int nomor, const char *fileMenu, const char *fileMeja) {
	
    int i;
    char tanggal[20];
    char status[10];
    getTanggal(tanggal, sizeof(tanggal));
    
    if (getStatusMeja(fileMeja, nomor, status, sizeof(status)) != 0) {
        printf("Gagal mendapatkan informasi meja.\n");
        return;
    }

    FILE *fileStruk = fopen("struk.txt", "w");
    if (fileStruk == NULL) {
        printf("Gagal membuka file untuk mencetak struk.\n");
        return;
    }

    fprintf(fileStruk, "======================== STRUK PEMBAYARAN ========================\n");
    fprintf(fileStruk, "Tanggal: %s\n", tanggal);
    fprintf(fileStruk, "Nomor Meja: %d\n", nomor);
    fprintf(fileStruk, "-----------------------------------------------------------------\n");
    fprintf(fileStruk, "No Item | Nama Item               | Jumlah | Harga   | Total\n");
    fprintf(fileStruk, "-----------------------------------------------------------------\n");

    for (i = 0; i < jumlahItem; i++) {
        float hargaTotalItem = Menu[i].Harga * Pesanan[i].JumlahItem;
        fprintf(fileStruk, "%-8d | %-24s | %-6d | %-8.2f | %-8.2f\n",
                i + 1, Menu[i].Nama, Pesanan[i].JumlahItem, Menu[i].Harga, hargaTotalItem);
    }

    fprintf(fileStruk, "-----------------------------------------------------------------\n");
    fprintf(fileStruk, "Total Harga: Rp%.2f\n", TotalHarga);
    fprintf(fileStruk, "-----------------------------------------------------------------\n");
    fprintf(fileStruk, "                      TERIMA KASIH!                            \n");
    fprintf(fileStruk, "=================================================================\n");

    fclose(fileStruk);
    printf("Struk telah dicetak ke file 'struk.txt'.\n");
}

	

/* S P E S I F I K A S I   M O D U L */
/******** U N T U K S T A F F ********/

	
void ModulStaff() {
    LoginStaff();
}

void LoginStaff() {
	
    char password[256];
    
    FILE *f = fopen("password.txt", "r");
    if (f == NULL) {
        printf("File password tidak ditemukan.\n");
        return;
    }
    fgets(password, sizeof(password), f);
    fclose(f);
    password[strcspn(password, "\n")] = '\0'; // Menghapus newline

    if (CekPassword(password) == 0) {
        OpsiStaff();
    } else {
        printf("Mohon Maaf, Password Salah. Silakan Coba Lagi.\n");
    }
}
	 	
//modul untuk melakukan verivikasi pasword ketika akan memasuki laman khusus Staff 
int CekPassword(const char *password) {
	
    char verifikasi[256];
    
    printf("Masukkan Password: ");
    scanf("%255s", verifikasi);

    if (strcmp(verifikasi, password) != 0) {
        return 1; // Password salah
    }
    return 0; // Password benar
}
		
//modul khusus untuk staff saat akan melakukan rekapan, sehingga pelanggan tidak bisa melihatnya selain staff
void BukaFilePassword() {
	
    FILE *f = fopen("password.txt", "r");
    if (f == NULL) {
        printf("Maaf, file tidak dapat ditemukan.\n");
    }
    return;
    
    // Inisial data untuk file menu
    fprintf(f, "senanghati\n");
    
    fclose(f);
    printf("Password Benar, Selamat Datang!\n");
}

//modul utnuk melakuakn pilihan kepada Staff 
void OpsiStaff() {
    system ("cls"); 
    printf("Halo Staff!\n");

    while (1) {
        int opt;
        printf("Ada Keperluan Apa Hari Ini?\n");
        printf("1. Edit Menu Cafe\n2. Lihat Rekapan Menu Cafe\n3. Keluar\n");
        
        printf("Masukkan Pilihan: ");
        scanf("%d", &opt);

        if (opt == 1) {
            EditMenu();
        } else if (opt == 2) {
            rekapan();
        } else if (opt == 3) {
            break;
        } else {
            printf("Perintah tidak dikenali.\n");
            clear_screen();
        }
    }
}


//modul staff untuk melakukan pemilihan rekapan apa yang akan di buka 	
void rekapan(Order Pesanan[], int JumlahItem, MenuItem Menu[], int jumlahMenuItem, const char* namaFile) {
	
    clear_screen();
    int pilihan,hari,bulan,tahun; 
    
    printf("\nIngin melakukan rekapitulasi penjualan berdasarkan:\n1. Hari\n2. Bulan\n3. Tahun\nPilih (1-3): ");
    scanf("%d", &pilihan);
    while (1) {
    switch (pilihan) {
        case 1:
            printf("Masukkan hari, bulan, dan tahun (dd mm yyyy): ");
            scanf("%d %d %d", &hari, &bulan, &tahun);
            rekapHarianTertentu(Pesanan,JumlahItem, Menu, jumlahMenuItem, hari, bulan, tahun, "rekap_harian_tertentu.txt");
            break;
        case 2:
            printf("Masukkan bulan dan tahun (mm yyyy): ");
            scanf("%d %d", &bulan, &tahun);
            rekapBulananTertentu(Pesanan,JumlahItem, Menu, jumlahMenuItem, bulan, tahun, "rekap_bulanan_tertentu.txt");
            break;
        case 3:
            printf("Masukkan tahun (yyyy): ");
            scanf("%d", &tahun);
            rekapTahunanTertentu(Pesanan,JumlahItem, Menu, jumlahMenuItem, tahun, "rekap_tahunan_tertentu.txt");
            break;
        default:
            printf("Pilihan tidak valid.\n");
		}
	}
}
   

	
//modul untuk melakukan rekapan harian 
void RekapHarian(Order Pesanan[], int JumlahItem, MenuItem Menu[], int jumlahMenuItem, int hari, int bulan, int tahun, const char* namaFile) {
	
	int i = 0;
		
    FILE* file = fopen(namaFile, "a");
    if (file == NULL) {
        printf("Gagal membuka file %s untuk menulis rekap.\n", namaFile);
        return;
    }

    float TotalHargaHarian = 0;
    fprintf(file, "Rekap Pesanan untuk Tanggal %d-%d-%d:\n", hari, bulan, tahun);

    for (i = 0; i < JumlahItem; i++) { 
		if (Pesanan[i].Hari == hari && Pesanan[i].Bulan == bulan && Pesanan[i].Tahun == tahun) { 
			int indeks = cariItem (Menu, jumlahMenuItem, Pesanan[i].NoItem); 
				if (indeks != -1) {
			        fprintf(file, "No Item : %d\nNama Pemesan : %s\nNama Menu : %c\nJumlah Pesanan : %d\n Waktu Pemesanan: %s\nTotal Harga : Rp.%.2f\n",
			        Pesanan[i].NoItem, Pesanan[i].Customer, Pesanan[i].Nama, Pesanan[i].JumlahItem, Pesanan[i].WaktuPesanan, Pesanan[i].TotalHarga);
			        TotalHargaHarian += Pesanan[i].TotalHarga;
   				}
   		}	
	}
	
    fprintf(file, "Total harga tanggal %d-%d-%d: Rp.%.2f\n\n", hari, bulan, tahun, TotalHargaHarian);

    fclose(file);
    printf("Rekap harian berhasil disimpan ke file %s\n", namaFile);
}

//modul untuk melakukan rekapan bulanan
void RekapBulanan(Order Pesanan[], int JumlahItem, MenuItem Menu[], int jumlahMenuItem, int hari, int bulan, int tahun, const char* namaFile) {
	
	int i = 0;
		
    FILE* file = fopen(namaFile, "a");
    if (file == NULL) {
        printf("Gagal membuka file %s untuk menulis rekap.\n", namaFile);
        return;
    }

    float TotalHargaHarian = 0;
    fprintf(file, "Rekap Pesanan untuk Bulan %d-%d:\n", bulan, tahun);

    for (i = 0; i < JumlahItem; i++) { 
		if (Pesanan[i].Bulan == bulan && Pesanan[i].Tahun == tahun) { 
			int indeks = cariItem (Menu, jumlahMenuItem, Pesanan[i].NoItem); 
				if (indeks != -1) {
			        fprintf(file, "No Item : %d\nNama Pemesan : %s\nNama Menu : %c\nJumlah Pesanan : %d\n Waktu Pemesanan: %s\nTotal Harga : Rp.%.2f\n",
			        Pesanan[i].NoItem, Pesanan[i].Customer, Pesanan[i].Nama, Pesanan[i].JumlahItem, Pesanan[i].WaktuPesanan, Pesanan[i].TotalHarga);
			        TotalHargaHarian += Pesanan[i].TotalHarga;
   				}
   		}	
	}
	
    fprintf(file, "Total harga Bulan %d-%d: Rp.%.2f\n\n", bulan, tahun, TotalHargaHarian);

    fclose(file);
    printf("Rekap harian berhasil disimpan ke file %s\n", namaFile);
}

//modul untuk melakukan rekapan bulanan
void RekapTahunan(Order Pesanan[], int JumlahItem, MenuItem Menu[], int jumlahMenuItem, int hari, int bulan, int tahun, const char* namaFile) {
	
	int i = 0;
		
    FILE* file = fopen(namaFile, "a");
    if (file == NULL) {
        printf("Gagal membuka file %s untuk menulis rekap.\n", namaFile);
        return;
    }

    float TotalHargaHarian = 0;
    fprintf(file, "Rekap Pesanan untuk Tahun %d:\n", tahun);

    for (i = 0; i < JumlahItem; i++) { 
		if (Pesanan[i].Tahun == tahun) { 
			int indeks = cariItem (Menu, jumlahMenuItem, Pesanan[i].NoItem); 
				if (indeks != -1) {
			        fprintf(file, "No Item : %d\nNama Pemesan : %s\nNama Menu : %c\nJumlah Pesanan : %d\n Waktu Pemesanan: %s\nTotal Harga : Rp.%.2f\n",
			        Pesanan[i].NoItem, Pesanan[i].Customer, Pesanan[i].Nama, Pesanan[i].JumlahItem, Pesanan[i].WaktuPesanan, Pesanan[i].TotalHarga);
			        TotalHargaHarian += Pesanan[i].TotalHarga;
   				}
   		}	
	}
	
    fprintf(file, "Total harga Tahun %d: Rp.%.2f\n\n", tahun, TotalHargaHarian);

    fclose(file);
    printf("Rekap harian berhasil disimpan ke file %s\n", namaFile);
}


//modul unutk melakukan pengeditan menu 
void editMenu(MenuItem Menu[], int jumlahMenuItem) {
	
    int NoItem;
    char NamaItemBaru[50];
    int HargaBaru;
    printf("\nMasukkan nomor item yang ingin diedit: ");
    scanf("%d", &NoItem);

    int indeks = -1;
    int i;
    
    for (i = 0; i < jumlahMenuItem; i++) {
        if (Menu[i].NoItem == NoItem) {
            indeks = i;
            break;
        }
    }

    if (indeks != -1) {
        printf("Masukkan nama item baru: ");
        scanf(" %[^\n]s", NamaItemBaru);
        printf("Masukkan harga baru: ");
        scanf("%d", &HargaBaru);

        strcpy(Menu[indeks].Nama, NamaItemBaru);
        Menu[indeks].Harga = HargaBaru;

        printf("Item berhasil diedit.\n");
    } else {
        printf("Item tidak ditemukan.\n");
    }
}

//modul untuk menyimpan menu yang telah diedit dimasukan kedalam file semula
void simpan_data_Menu(const char *lokasi_file, MenuItem Menu[], int jumlahMenuItem) {
	
	int i;
	
    FILE *f = fopen(lokasi_file, "w");
    if (f == NULL) {
        printf("Kesalahan: Tidak dapat membuka file untuk menulis.\n");
        return;
    }

    for (i = 0; i < jumlahMenuItem; i++) {
        fprintf(f, "%d|%s|%d\n", Menu[i].NoItem, Menu[i].Nama, Menu[i].Harga);
    }

    fclose(f);
    printf("Perubahan berhasil disimpan.\n");
}

//modul untuk mengubah status pada meja yang sudah dibooking agar kembali kosong dan bisa dipesan kembali 
void ubahStatus(Meja meja[], int totalMeja) {
	
	int i;
	
    int nomorMeja;
    printf("\nMasukkan nomor meja yang ingin diubah statusnya: ");
    scanf("%d", &nomorMeja);

    for ( i = 0; i < totalMeja; i++) {
        if (meja[i].nomor == nomorMeja) {
            if (strcmp(meja[i].status, "Kosong") == 0) {
                strcpy(meja[i].status, "Terisi");
            } else {
                strcpy(meja[i].status, "Kosong");
            }
            printf("Status meja nomor %d berhasil diubah menjadi %s.\n", meja[i].nomor, meja[i].status);
            simpanDataKeFile(meja, totalMeja); // Simpan data ke file setelah perubahan
            return;
        }
    }
    printf("Meja dengan nomor %d tidak ditemukan.\n", nomorMeja);
}
}



	

//PROGRAM UTAMA 
main () { 
    Meja daftarMeja[MAX_MEJA];
    MenuItem daftarMenu[MAX_MENU];
    Order pesanan[MAX_MENU]; // Asumsi maksimum jumlah pesanan sama dengan jumlah menu
    int totalMeja = 0;
    int jumlahMenuItem = 0;
    int jumlahItemPesanan = 0;
    float totalHarga = 0.0;
    float nominalPembayaran = 0.0;
    int hargaTotalItem = 0;
    const char *lokasi_file = ("Menu.txt", "meja.txt");

    // Memanggil ModulPelanggan
    ModulPelanggan(daftarMeja, daftarMenu, pesanan, &totalMeja, lokasi_file, &jumlahMenuItem, &jumlahItemPesanan, totalHarga, nominalPembayaran, hargaTotalItem);
    
    //memanggil modul Staff
    ModulStaff(); 

    return 0;
}












